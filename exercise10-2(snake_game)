// C program to build the complete
// snake game
#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
//#include <unistd.h>

int i, j, height = 20, width = 20;
int gameover, score;
int x, y, fruitx, fruity, flag;
int tempX, tempY, temp2X, temp2Y;
char length[99999999];
int length_posy[99999999];
int length_posx[99999999];

// Function to generate the fruit
// within the boundary
void setup()
{
	srand(time(NULL));
	gameover = 0;

	// Stores height and width
	x = height / 2;
	y = width / 2;
	length_posx[1] = x+1, length_posy[1] = y;
label1:
	fruitx = rand() % 20;
	if (fruitx == 0)
		goto label1;
label2:
	fruity = rand() % 20;
	if (fruity == 0)
		goto label2;
	score = 0;
}

// Function to draw the boundaries
void draw()
{
	Sleep(200);
	system("cls");
	for (i = 0; i < height; i++) {
		for (j = 0; j < width; j++) {
			if (i == 0 || i == width - 1
				|| j == 0
				|| j == height - 1) {
				printf("X");
			}
			else {
				if (i == x && j == y)
					printf("0");
				else if (i == fruitx
					&& j == fruity)
					printf("*");
				else if (i == length_posx[(score % 10)] && j == length_posy[(score % 10)]) {
					printf("x");
				}
			
				else
					printf(" ");
			}
		}
		printf("\n");
	}

	// Print the score after the
	// game ends
	printf("score = %d", score);
	printf("\n");
	printf("press X to quit the game\n\n\n");
}

// Function to take the input
void input()
{
	if (_kbhit()) {
		switch (_getch()) {
		case 'a':
			flag = 1;
			break;
		case 's':
			flag = 2;
			break;
		case 'd':
			flag = 3;
			break;
		case 'w':
			flag = 4;
			break;
		case 'x':
			gameover = 1;
			break;
		}
	}
}

// Function for the logic behind
// each movement
void logic()
{	
	Sleep(0.05);	
	tempX = x, tempY = y;
	for (size_t i = 99999998; i > 0; i--)
	{
		length_posx[i] = length_posx[i-1];
		length_posy[i] = length_posy[i-1];
		length_posx[i - 1] = tempX;
		length_posy[i - 1] = tempY;
	}

	switch (flag) {
	case 1:
		y--;
		break;
	case 2:
		x++;
		break;
	case 3:
		y++;
		break;
	case 4:
		x--;
		break;
	default:
		break;
	}


	// If the game is over
	if (x <= 0 || x >= height
		|| y <= 0 || y >= width)
		gameover = 1;
	for (size_t i = 0; i < 99999998; i++)
	{
		if (true)
		{

		}
	}

	// If snake reaches the fruit
	// then update the score
	if (x == fruitx && y == fruity) {
	label3:
		fruitx = rand() % 20;
		if (fruitx == 0)
			goto label3;

		// After eating the above fruit
		// generate new fruit
	label4:
		fruity = rand() % 20;
		if (fruity == 0)
			goto label4;
		score += 10;
		length[(score % 10)] = 1;
	}
}

// Driver Code
void main()
{
	int m, n;

	// Generate boundary
	setup();
	system("cls");
	// Until the game is over
	while (!gameover) {

		// Function Call
		draw();
		input();
		logic();
	}
}
